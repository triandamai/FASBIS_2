{"remainingRequest":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vuetify-loader\\lib\\loader.js!C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\kp_amikom\\views\\src\\components\\Flickity.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\src\\components\\Flickity.vue","mtime":1565530382839},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nimport Flickity from \"flickity\";\nexport default {\n  props: {\n    options: Object\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$flickity.destroy();\n    this.$flickity = null;\n  },\n  methods: {\n    /**\r\n     * Initialize a new flickity and emit init event.\r\n     */\n    init: function init() {\n      this.$flickity = new Flickity(this.$el, this.options);\n      this.$emit(\"init\", this.$flickity);\n    },\n\n    /**\r\n     * Return the current flickity instance to access directly\r\n     *\r\n     * @return {Flickity}\r\n     */\n    flickity: function flickity() {\n      return this.$flickity;\n    },\n\n    /**\r\n     * Selecting Slides\r\n     */\n\n    /**\r\n     * Select a slide\r\n     *\r\n     * @param {number} index\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\n    select: function select(index, isWrapped, isInstant) {\n      this.$flickity.select(index, isWrapped, isInstant);\n    },\n\n    /**\r\n     * Change to the next slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\n    next: function next(isWrapped, isInstant) {\n      this.$flickity.next(isWrapped, isInstant);\n    },\n\n    /**\r\n     * Change to the previous slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\n    previous: function previous(isWrapped, isInstant) {\n      this.$flickity.previous(isWrapped, isInstant);\n    },\n\n    /**\r\n     * Select a cell\r\n     *\r\n     * @param {number} value\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\n    selectCell: function selectCell(value, isWrapped, isInstant) {\n      this.$flickity.selectCell(value, isWrapped, isInstant);\n    },\n\n    /**\r\n     * Sizing and Positioning\r\n     */\n\n    /**\r\n     * Trigger a resize event\r\n     */\n    resize: function resize() {\n      this.$flickity.resize();\n    },\n\n    /**\r\n     * Trigger a reposition event\r\n     */\n    reposition: function reposition() {\n      this.$flickity.reposition();\n    },\n\n    /**\r\n     * Adding and removing cells\r\n     */\n\n    /**\r\n     * Prepend elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\n    prepend: function prepend(elements) {\n      this.$flickity.prepend(elements);\n    },\n\n    /**\r\n     * Append elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\n    append: function append(elements) {\n      this.$flickity.append(elements);\n    },\n\n    /**\r\n     * Insert elements at a given index\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     * @param {number} index\r\n     */\n    insert: function insert(elements, index) {\n      this.$flickity.insert(elements, index);\n    },\n\n    /**\r\n     * Remove elements from flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\n    remove: function remove(elements) {\n      this.$flickity.remove(elements);\n    },\n\n    /**\r\n     * Player\r\n     */\n\n    /**\r\n     * Trigger a playPlayer event\r\n     */\n    playPlayer: function playPlayer() {\n      this.$flickity.playPlayer();\n    },\n\n    /**\r\n     * Trigger a stopPlayer event\r\n     */\n    stopPlayer: function stopPlayer() {\n      this.$flickity.stopPlayer();\n    },\n\n    /**\r\n     * Trigger a pausePlayer event\r\n     */\n    pausePlayer: function pausePlayer() {\n      this.$flickity.pausePlayer();\n    },\n\n    /**\r\n     * Trigger a unpausePlayer event\r\n     */\n    unpausePlayer: function unpausePlayer() {\n      this.$flickity.unpausePlayer();\n    },\n\n    /**\r\n     * Trigger a rerender event\r\n     */\n    rerender: function rerender() {\n      this.$flickity.destroy();\n      this.init();\n    },\n\n    /**\r\n     * Utilities\r\n     */\n\n    /**\r\n     * Destroy the flickity instance\r\n     */\n    destroy: function destroy() {\n      this.$flickity.destroy();\n    },\n\n    /**\r\n     * Trigger a rerender event\r\n     */\n    reloadCells: function reloadCells() {\n      this.$flickity.reloadCells();\n    },\n\n    /**\r\n     * Get the cell elements\r\n     *\r\n     * @return {array}\r\n     */\n    getCellElements: function getCellElements() {\n      return this.$flickity.getCellElements();\n    },\n\n    /**\r\n     * Return flickity data\r\n     *\r\n     * @return {Flickity}\r\n     */\n    data: function data() {\n      return Flickity.data(this.$el);\n    },\n\n    /**\r\n     * Events\r\n     */\n\n    /**\r\n     * Attach an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\n    on: function on(eventName, listener) {\n      this.$flickity.on(eventName, listener);\n    },\n\n    /**\r\n     * Remove an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\n    off: function off(eventName, listener) {\n      this.$flickity.off(eventName, listener);\n    },\n\n    /**\r\n     * Attach an event once\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\n    once: function once(eventName, listener) {\n      this.$flickity.once(eventName, listener);\n    },\n\n    /**\r\n     * Properties\r\n     */\n\n    /**\r\n     * Return the selected element\r\n     *\r\n     * @return {HTMLElement}\r\n     */\n    selectedElement: function selectedElement() {\n      return this.$flickity.selectedElement;\n    },\n\n    /**\r\n     * Return the selected elements\r\n     *\r\n     * @return {array}\r\n     */\n    selectedElements: function selectedElements() {\n      return this.$flickity.selectedElements;\n    },\n\n    /**\r\n     * Return the selected index\r\n     *\r\n     * @return {number}\r\n     */\n    selectedIndex: function selectedIndex() {\n      return this.$flickity.selectedIndex;\n    },\n\n    /**\r\n     * Return the cells\r\n     *\r\n     * @return {array}\r\n     */\n    cells: function cells() {\n      return this.$flickity.cells;\n    },\n\n    /**\r\n     * Return the slides\r\n     *\r\n     * @return {array}\r\n     */\n    slides: function slides() {\n      return this.$flickity.slides;\n    },\n\n    /**\r\n     * Disable dragging of slider\r\n     */\n    disableDrag: function disableDrag() {\n      this.$flickity.options.draggable = false;\n      this.$flickity.updateDraggable();\n    },\n\n    /**\r\n     * Enable dragging of slider\r\n     */\n    enableDrag: function enableDrag() {\n      this.$flickity.options.draggable = true;\n      this.$flickity.updateDraggable();\n    }\n  }\n}; // <style src=\"flickity/dist/flickity.css\"></style>",{"version":3,"sources":["Flickity.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <slot/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Flickity from \"flickity\";\r\n\r\nexport default {\r\n  props: {\r\n    options: Object\r\n  },\r\n\r\n  mounted() {\r\n    this.init();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.$flickity.destroy();\r\n    this.$flickity = null;\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * Initialize a new flickity and emit init event.\r\n     */\r\n    init() {\r\n      this.$flickity = new Flickity(this.$el, this.options);\r\n      this.$emit(\"init\", this.$flickity);\r\n    },\r\n\r\n    /**\r\n     * Return the current flickity instance to access directly\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    flickity() {\r\n      return this.$flickity;\r\n    },\r\n\r\n    /**\r\n     * Selecting Slides\r\n     */\r\n\r\n    /**\r\n     * Select a slide\r\n     *\r\n     * @param {number} index\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    select(index, isWrapped, isInstant) {\r\n      this.$flickity.select(index, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the next slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    next(isWrapped, isInstant) {\r\n      this.$flickity.next(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the previous slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    previous(isWrapped, isInstant) {\r\n      this.$flickity.previous(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Select a cell\r\n     *\r\n     * @param {number} value\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    selectCell(value, isWrapped, isInstant) {\r\n      this.$flickity.selectCell(value, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Sizing and Positioning\r\n     */\r\n\r\n    /**\r\n     * Trigger a resize event\r\n     */\r\n    resize() {\r\n      this.$flickity.resize();\r\n    },\r\n\r\n    /**\r\n     * Trigger a reposition event\r\n     */\r\n    reposition() {\r\n      this.$flickity.reposition();\r\n    },\r\n\r\n    /**\r\n     * Adding and removing cells\r\n     */\r\n\r\n    /**\r\n     * Prepend elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    prepend(elements) {\r\n      this.$flickity.prepend(elements);\r\n    },\r\n\r\n    /**\r\n     * Append elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    append(elements) {\r\n      this.$flickity.append(elements);\r\n    },\r\n\r\n    /**\r\n     * Insert elements at a given index\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     * @param {number} index\r\n     */\r\n    insert(elements, index) {\r\n      this.$flickity.insert(elements, index);\r\n    },\r\n\r\n    /**\r\n     * Remove elements from flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    remove(elements) {\r\n      this.$flickity.remove(elements);\r\n    },\r\n\r\n    /**\r\n     * Player\r\n     */\r\n\r\n    /**\r\n     * Trigger a playPlayer event\r\n     */\r\n    playPlayer() {\r\n      this.$flickity.playPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a stopPlayer event\r\n     */\r\n    stopPlayer() {\r\n      this.$flickity.stopPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a pausePlayer event\r\n     */\r\n    pausePlayer() {\r\n      this.$flickity.pausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a unpausePlayer event\r\n     */\r\n    unpausePlayer() {\r\n      this.$flickity.unpausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    rerender() {\r\n      this.$flickity.destroy();\r\n      this.init();\r\n    },\r\n\r\n    /**\r\n     * Utilities\r\n     */\r\n\r\n    /**\r\n     * Destroy the flickity instance\r\n     */\r\n    destroy() {\r\n      this.$flickity.destroy();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    reloadCells() {\r\n      this.$flickity.reloadCells();\r\n    },\r\n\r\n    /**\r\n     * Get the cell elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    getCellElements() {\r\n      return this.$flickity.getCellElements();\r\n    },\r\n\r\n    /**\r\n     * Return flickity data\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    data() {\r\n      return Flickity.data(this.$el);\r\n    },\r\n\r\n    /**\r\n     * Events\r\n     */\r\n\r\n    /**\r\n     * Attach an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    on(eventName, listener) {\r\n      this.$flickity.on(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Remove an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    off(eventName, listener) {\r\n      this.$flickity.off(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Attach an event once\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    once(eventName, listener) {\r\n      this.$flickity.once(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Properties\r\n     */\r\n\r\n    /**\r\n     * Return the selected element\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    selectedElement() {\r\n      return this.$flickity.selectedElement;\r\n    },\r\n\r\n    /**\r\n     * Return the selected elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    selectedElements() {\r\n      return this.$flickity.selectedElements;\r\n    },\r\n\r\n    /**\r\n     * Return the selected index\r\n     *\r\n     * @return {number}\r\n     */\r\n    selectedIndex() {\r\n      return this.$flickity.selectedIndex;\r\n    },\r\n\r\n    /**\r\n     * Return the cells\r\n     *\r\n     * @return {array}\r\n     */\r\n    cells() {\r\n      return this.$flickity.cells;\r\n    },\r\n\r\n    /**\r\n     * Return the slides\r\n     *\r\n     * @return {array}\r\n     */\r\n    slides() {\r\n      return this.$flickity.slides;\r\n    },\r\n\r\n    /**\r\n     * Disable dragging of slider\r\n     */\r\n    disableDrag() {\r\n      this.$flickity.options.draggable = false;\r\n      this.$flickity.updateDraggable();\r\n    },\r\n\r\n    /**\r\n     * Enable dragging of slider\r\n     */\r\n    enableDrag() {\r\n      this.$flickity.options.draggable = true;\r\n      this.$flickity.updateDraggable();\r\n    }\r\n  }\r\n};\r\n// <style src=\"flickity/dist/flickity.css\"></style>\r\n</script>\r\n"],"sourceRoot":"src/components"}]}