{"remainingRequest":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\kp_amikom\\views\\src\\components\\Flickity.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\src\\components\\Flickity.vue","mtime":1565530382839},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\kp_amikom\\views\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport Flickity from \"flickity\";\r\n\r\nexport default {\r\n  props: {\r\n    options: Object\r\n  },\r\n\r\n  mounted() {\r\n    this.init();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.$flickity.destroy();\r\n    this.$flickity = null;\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * Initialize a new flickity and emit init event.\r\n     */\r\n    init() {\r\n      this.$flickity = new Flickity(this.$el, this.options);\r\n      this.$emit(\"init\", this.$flickity);\r\n    },\r\n\r\n    /**\r\n     * Return the current flickity instance to access directly\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    flickity() {\r\n      return this.$flickity;\r\n    },\r\n\r\n    /**\r\n     * Selecting Slides\r\n     */\r\n\r\n    /**\r\n     * Select a slide\r\n     *\r\n     * @param {number} index\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    select(index, isWrapped, isInstant) {\r\n      this.$flickity.select(index, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the next slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    next(isWrapped, isInstant) {\r\n      this.$flickity.next(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the previous slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    previous(isWrapped, isInstant) {\r\n      this.$flickity.previous(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Select a cell\r\n     *\r\n     * @param {number} value\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    selectCell(value, isWrapped, isInstant) {\r\n      this.$flickity.selectCell(value, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Sizing and Positioning\r\n     */\r\n\r\n    /**\r\n     * Trigger a resize event\r\n     */\r\n    resize() {\r\n      this.$flickity.resize();\r\n    },\r\n\r\n    /**\r\n     * Trigger a reposition event\r\n     */\r\n    reposition() {\r\n      this.$flickity.reposition();\r\n    },\r\n\r\n    /**\r\n     * Adding and removing cells\r\n     */\r\n\r\n    /**\r\n     * Prepend elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    prepend(elements) {\r\n      this.$flickity.prepend(elements);\r\n    },\r\n\r\n    /**\r\n     * Append elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    append(elements) {\r\n      this.$flickity.append(elements);\r\n    },\r\n\r\n    /**\r\n     * Insert elements at a given index\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     * @param {number} index\r\n     */\r\n    insert(elements, index) {\r\n      this.$flickity.insert(elements, index);\r\n    },\r\n\r\n    /**\r\n     * Remove elements from flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    remove(elements) {\r\n      this.$flickity.remove(elements);\r\n    },\r\n\r\n    /**\r\n     * Player\r\n     */\r\n\r\n    /**\r\n     * Trigger a playPlayer event\r\n     */\r\n    playPlayer() {\r\n      this.$flickity.playPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a stopPlayer event\r\n     */\r\n    stopPlayer() {\r\n      this.$flickity.stopPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a pausePlayer event\r\n     */\r\n    pausePlayer() {\r\n      this.$flickity.pausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a unpausePlayer event\r\n     */\r\n    unpausePlayer() {\r\n      this.$flickity.unpausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    rerender() {\r\n      this.$flickity.destroy();\r\n      this.init();\r\n    },\r\n\r\n    /**\r\n     * Utilities\r\n     */\r\n\r\n    /**\r\n     * Destroy the flickity instance\r\n     */\r\n    destroy() {\r\n      this.$flickity.destroy();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    reloadCells() {\r\n      this.$flickity.reloadCells();\r\n    },\r\n\r\n    /**\r\n     * Get the cell elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    getCellElements() {\r\n      return this.$flickity.getCellElements();\r\n    },\r\n\r\n    /**\r\n     * Return flickity data\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    data() {\r\n      return Flickity.data(this.$el);\r\n    },\r\n\r\n    /**\r\n     * Events\r\n     */\r\n\r\n    /**\r\n     * Attach an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    on(eventName, listener) {\r\n      this.$flickity.on(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Remove an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    off(eventName, listener) {\r\n      this.$flickity.off(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Attach an event once\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    once(eventName, listener) {\r\n      this.$flickity.once(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Properties\r\n     */\r\n\r\n    /**\r\n     * Return the selected element\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    selectedElement() {\r\n      return this.$flickity.selectedElement;\r\n    },\r\n\r\n    /**\r\n     * Return the selected elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    selectedElements() {\r\n      return this.$flickity.selectedElements;\r\n    },\r\n\r\n    /**\r\n     * Return the selected index\r\n     *\r\n     * @return {number}\r\n     */\r\n    selectedIndex() {\r\n      return this.$flickity.selectedIndex;\r\n    },\r\n\r\n    /**\r\n     * Return the cells\r\n     *\r\n     * @return {array}\r\n     */\r\n    cells() {\r\n      return this.$flickity.cells;\r\n    },\r\n\r\n    /**\r\n     * Return the slides\r\n     *\r\n     * @return {array}\r\n     */\r\n    slides() {\r\n      return this.$flickity.slides;\r\n    },\r\n\r\n    /**\r\n     * Disable dragging of slider\r\n     */\r\n    disableDrag() {\r\n      this.$flickity.options.draggable = false;\r\n      this.$flickity.updateDraggable();\r\n    },\r\n\r\n    /**\r\n     * Enable dragging of slider\r\n     */\r\n    enableDrag() {\r\n      this.$flickity.options.draggable = true;\r\n      this.$flickity.updateDraggable();\r\n    }\r\n  }\r\n};\r\n// <style src=\"flickity/dist/flickity.css\"></style>\r\n",{"version":3,"sources":["Flickity.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Flickity.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <slot/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Flickity from \"flickity\";\r\n\r\nexport default {\r\n  props: {\r\n    options: Object\r\n  },\r\n\r\n  mounted() {\r\n    this.init();\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.$flickity.destroy();\r\n    this.$flickity = null;\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * Initialize a new flickity and emit init event.\r\n     */\r\n    init() {\r\n      this.$flickity = new Flickity(this.$el, this.options);\r\n      this.$emit(\"init\", this.$flickity);\r\n    },\r\n\r\n    /**\r\n     * Return the current flickity instance to access directly\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    flickity() {\r\n      return this.$flickity;\r\n    },\r\n\r\n    /**\r\n     * Selecting Slides\r\n     */\r\n\r\n    /**\r\n     * Select a slide\r\n     *\r\n     * @param {number} index\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    select(index, isWrapped, isInstant) {\r\n      this.$flickity.select(index, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the next slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    next(isWrapped, isInstant) {\r\n      this.$flickity.next(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Change to the previous slide\r\n     *\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    previous(isWrapped, isInstant) {\r\n      this.$flickity.previous(isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Select a cell\r\n     *\r\n     * @param {number} value\r\n     * @param {boolean} isWrapped\r\n     * @param {boolean} isInstant\r\n     */\r\n    selectCell(value, isWrapped, isInstant) {\r\n      this.$flickity.selectCell(value, isWrapped, isInstant);\r\n    },\r\n\r\n    /**\r\n     * Sizing and Positioning\r\n     */\r\n\r\n    /**\r\n     * Trigger a resize event\r\n     */\r\n    resize() {\r\n      this.$flickity.resize();\r\n    },\r\n\r\n    /**\r\n     * Trigger a reposition event\r\n     */\r\n    reposition() {\r\n      this.$flickity.reposition();\r\n    },\r\n\r\n    /**\r\n     * Adding and removing cells\r\n     */\r\n\r\n    /**\r\n     * Prepend elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    prepend(elements) {\r\n      this.$flickity.prepend(elements);\r\n    },\r\n\r\n    /**\r\n     * Append elements to flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    append(elements) {\r\n      this.$flickity.append(elements);\r\n    },\r\n\r\n    /**\r\n     * Insert elements at a given index\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     * @param {number} index\r\n     */\r\n    insert(elements, index) {\r\n      this.$flickity.insert(elements, index);\r\n    },\r\n\r\n    /**\r\n     * Remove elements from flickity\r\n     *\r\n     * @param {array|HTMLElement|NodeList} elements\r\n     */\r\n    remove(elements) {\r\n      this.$flickity.remove(elements);\r\n    },\r\n\r\n    /**\r\n     * Player\r\n     */\r\n\r\n    /**\r\n     * Trigger a playPlayer event\r\n     */\r\n    playPlayer() {\r\n      this.$flickity.playPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a stopPlayer event\r\n     */\r\n    stopPlayer() {\r\n      this.$flickity.stopPlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a pausePlayer event\r\n     */\r\n    pausePlayer() {\r\n      this.$flickity.pausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a unpausePlayer event\r\n     */\r\n    unpausePlayer() {\r\n      this.$flickity.unpausePlayer();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    rerender() {\r\n      this.$flickity.destroy();\r\n      this.init();\r\n    },\r\n\r\n    /**\r\n     * Utilities\r\n     */\r\n\r\n    /**\r\n     * Destroy the flickity instance\r\n     */\r\n    destroy() {\r\n      this.$flickity.destroy();\r\n    },\r\n\r\n    /**\r\n     * Trigger a rerender event\r\n     */\r\n    reloadCells() {\r\n      this.$flickity.reloadCells();\r\n    },\r\n\r\n    /**\r\n     * Get the cell elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    getCellElements() {\r\n      return this.$flickity.getCellElements();\r\n    },\r\n\r\n    /**\r\n     * Return flickity data\r\n     *\r\n     * @return {Flickity}\r\n     */\r\n    data() {\r\n      return Flickity.data(this.$el);\r\n    },\r\n\r\n    /**\r\n     * Events\r\n     */\r\n\r\n    /**\r\n     * Attach an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    on(eventName, listener) {\r\n      this.$flickity.on(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Remove an event\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    off(eventName, listener) {\r\n      this.$flickity.off(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Attach an event once\r\n     *\r\n     * @param {string} eventName\r\n     * @param {function} listener\r\n     */\r\n    once(eventName, listener) {\r\n      this.$flickity.once(eventName, listener);\r\n    },\r\n\r\n    /**\r\n     * Properties\r\n     */\r\n\r\n    /**\r\n     * Return the selected element\r\n     *\r\n     * @return {HTMLElement}\r\n     */\r\n    selectedElement() {\r\n      return this.$flickity.selectedElement;\r\n    },\r\n\r\n    /**\r\n     * Return the selected elements\r\n     *\r\n     * @return {array}\r\n     */\r\n    selectedElements() {\r\n      return this.$flickity.selectedElements;\r\n    },\r\n\r\n    /**\r\n     * Return the selected index\r\n     *\r\n     * @return {number}\r\n     */\r\n    selectedIndex() {\r\n      return this.$flickity.selectedIndex;\r\n    },\r\n\r\n    /**\r\n     * Return the cells\r\n     *\r\n     * @return {array}\r\n     */\r\n    cells() {\r\n      return this.$flickity.cells;\r\n    },\r\n\r\n    /**\r\n     * Return the slides\r\n     *\r\n     * @return {array}\r\n     */\r\n    slides() {\r\n      return this.$flickity.slides;\r\n    },\r\n\r\n    /**\r\n     * Disable dragging of slider\r\n     */\r\n    disableDrag() {\r\n      this.$flickity.options.draggable = false;\r\n      this.$flickity.updateDraggable();\r\n    },\r\n\r\n    /**\r\n     * Enable dragging of slider\r\n     */\r\n    enableDrag() {\r\n      this.$flickity.options.draggable = true;\r\n      this.$flickity.updateDraggable();\r\n    }\r\n  }\r\n};\r\n// <style src=\"flickity/dist/flickity.css\"></style>\r\n</script>\r\n"]}]}